"""
Ollama (Local) API Integration for QGIS Copilot
"""

import json
import requests
from qgis.PyQt.QtCore import QSettings, QObject, pyqtSignal
from qgis.core import QgsMessageLog, Qgis


class OllamaAPI(QObject):
    """Handle Ollama local API communication"""

    response_received = pyqtSignal(str)
    error_occurred = pyqtSignal(str)

    # A small, sensible default set; users can run any local model
    AVAILABLE_MODELS = [
        "gpt-oss:20b",
        "llama3.1:8b",
        "llama3.1:70b",
        "mistral",
    ]

    def __init__(self):
        super().__init__()
        self.settings = QSettings()
        # No API key required for local Ollama
        self.api_key = ""
        self.model = self.settings.value("qgis_copilot/ollama_model", self.AVAILABLE_MODELS[0])
        # Allow overriding base URL if needed, default local daemon
        self.base_url = self.settings.value("qgis_copilot/ollama_base_url", "http://localhost:11434")

        # System prompt mirrors other providers
        self.system_prompt = """
You are QGIS Copilot, an expert PyQGIS developer assistant with comprehensive knowledge of the QGIS PyQGIS Developer Cookbook (https://docs.qgis.org/3.40/en/docs/pyqgis_developer_cookbook/index.html).

Follow the same execution environment rules used by the plugin (no `import qgis`, use provided globals like `iface`, `project`, `canvas`, use `QgsProject`, `QgsVectorLayer`, `QVariant`, etc.).
Always return complete, runnable scripts when modifying prior code.
"""

    # API-key methods are no-ops to fit existing UI flows
    def set_api_key(self, api_key):
        self.api_key = ""  # ignored

    def get_api_key(self):
        return ""

    def set_model(self, model_name):
        self.model = model_name
        self.settings.setValue("qgis_copilot/ollama_model", model_name)

    def set_base_url(self, url):
        """Set and save the Ollama base URL (e.g., http://localhost:11434)"""
        self.base_url = url
        self.settings.setValue("qgis_copilot/ollama_base_url", url)

    def get_base_url(self):
        return self.base_url

    def list_models(self):
        """Query the local Ollama daemon for available models.

        Returns a list of model names or raises an exception.
        """
        url = f"{self.base_url.rstrip('/')}/api/tags"
        resp = requests.get(url, timeout=10)
        if resp.status_code != 200:
            raise RuntimeError(f"Ollama tags API error {resp.status_code}: {resp.text}")
        data = resp.json()
        models = [m.get("name") for m in data.get("models", []) if m.get("name")]
        return models

    def send_message(self, message, context=None):
        """Send a message to local Ollama using /api/generate (non-stream)."""
        url = f"{self.base_url.rstrip('/')}/api/generate"

        user_content = message
        if context:
            user_content = f"Current QGIS Context:\n{context}\n\nUser Question: {message}"

        payload = {
            "model": self.model,
            "prompt": user_content,
            "system": self.system_prompt,
            "stream": False,
        }

        try:
            response = requests.post(
                url,
                headers={"Content-Type": "application/json"},
                json=payload,
                timeout=60,
            )

            if response.status_code == 200:
                data = response.json()
                content = data.get("response") or ""
                if content:
                    self.response_received.emit(content.strip())
                else:
                    self.error_occurred.emit("No response generated by Ollama.")
            else:
                error_msg = f"API Error {response.status_code}: {response.text}"
                self.error_occurred.emit(error_msg)
                QgsMessageLog.logMessage(error_msg, "QGIS Copilot", level=Qgis.Critical)

        except Exception as e:
            error_msg = f"Request to Ollama failed: {str(e)}"
            self.error_occurred.emit(error_msg)
            QgsMessageLog.logMessage(error_msg, "QGIS Copilot", level=Qgis.Critical)
